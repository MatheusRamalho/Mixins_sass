// | FUNCTIONS |

// Background gradient 01.

@function gradient__($type, $value, $color, $color2) {
    $gradient: #{$type}-gradient(#{$value}deg, $color, $color2);

    @return $gradient;
}

// Background gradient 02.

@function gradient__detail($type, $value, $color__01, $opacity__01, $value__01, $color__02, $opacity__02, $value__02) {
    $gradient: #{$type}-gradient(#{$value}deg, rgba($color__01, $opacity__01) #{$value__01}, rgba($color__02, $opacity__02) #{$value__02});

    @return $gradient;
}

// Converter PX -> REM.

@function convert__for__rem($value, $base: 16) {
    @if type-of($value) == "number" { // type-of - retorna o tipo do valor.
        @warn "O valor é um número: #{ $value }";

        @if not unitless($value) { // unitles() - retorna se o número tem uma unidade.
            @warn "O valor tem unidade:" unit($value);

            @if unit($value) != rem { // unit() - retorna uma string com a unidade.
                @warn "O valor tem unidade diferente de rem: #{ $value }";

                $unid: $value / ($value * 0 + 1); // removendo a unidade.
                $value: #{($unid / $base)}rem; // transformando em rem.
                @return $value;

            } @else {
                @warn "O valor tem unidade rem: #{ $value }";
                @return $value;
            }

        } @else {
            @warn "O valor não tem unidade: #{ $value }";
            @return #{$value}rem; // só adiciona a unidade rem ao value.

            // transforma o value em rem.
            // $value: #{($value / $base)}rem;
            // @return $value;
        }

        @return $value;

    } @else {
        @warn "O valor não é um número: #{ $value }";
        @debug "O valor não é um número: #{ $value }";
    }
}

