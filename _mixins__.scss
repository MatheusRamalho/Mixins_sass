// | MIXINS |

// | TEXTS |

// Para @font-face.
@mixin font__($family, $caminho, $style: normal, $display: auto, $stretch: normal, $synthesis: none, $kerning: auto, $variant: normal) {
    font-family: $family;
    src: $caminho;
    // font-weight: $weight;
    font-style: $style;
    font-variant: $variant;
    font-display: $display; // Determina como uma face de fonte é exibida com base em se e quando ela foi baixada e está pronta para uso.
    font-stretch: $stretch; // Seleciona uma face normal, condensada ou expandida de uma fonte.
    font-synthesis: $synthesis; // Controla quais fontes ausentes, negrito ou itálico, podem ser sintetizadas pelo navegador.
    font-kerning: $kerning; // Informação de kerning, controle de ocmo as letras serão espaçadas.
}

// Formatando fonts.
@mixin font__format($weight: 400, $color, $lineH: normal, $letterS: normal, $textT: none) {
    font-weight: $weight;
    color: $color;
    line-height: $lineH;
    letter-spacing: $letterS;
    text-transform: $textT;
}

// Truncate.
@mixin truncate__($value) {
    max-width: $value;
    white-space: nowrap;
    overflow: hidden;
    -o-text-overflow: ellipsis;
    text-overflow: ellipsis;
}

// Placeholder.
@mixin placeholder__ {
    &.placeholder { @content; }
    &:-moz-placeholder { @content; }
    &::-moz-placeholder { @content; }
    &:-ms-input-placeholder { @content; }
    &::-webkit-input-placeholder { @content; }
}

// | BACKGROUNDS |

// Backgorund para buttons.
@mixin backgrounds__($bg) {
    background: $bg;

    &:hover, &:focus {
        background: darken($bg, 8%);
        // background: adjust-color($bg, $lightness: -8%);
        // background: scale-color($bg, $lightness: -8%);
        @include transition__($duration: 0.3s);
    }

    &:active, &:active:focus {
        background: darken($bg, 25%);
        // background: adjust-color($bg, $lightness: -25%);
        // background: scale-color($bg, $lightness: -25%);
    }
}

// Background opacity.
@mixin backgrounds__opacity($color, $opacity: 0.3) {
    background: $color; // Para browsers antigos.
    background: rgba($color, $opacity);
}

// Background Gradient color.
@mixin background__gradient($color, $color2) {
    @include prefixes__(linear-gradient, $color, ('webkit', 'o'));

    background: -webkit-gradient(linear, left top, right top, from($color), to($color2));
    background: -o-linear-gradient(left, $color, $color2);
    background: linear-gradient(90deg, $color, $color2);
}

// Background Gradient image e color.
@mixin background__image($image, $gradient: none) {
    background-image: $image, $gradient;
}

// Complementos do backgroud image geralmente.
@mixin background__complement( $color, $size: cover, $origin: border-box, $clip: border-box, $position: center, $repeat: no-repeat, $attachment: scroll) {
    background-color: $color;
    background-size: $size;
    background-repeat: $repeat;
    background-clip: $clip;
    background-position: $position; // A posição é relativa à posição do background-origin.
    background-origin: $origin; // É ignorado se o background-attachment for fixed.
    background-attachment: $attachment;
}

// | EFECTS |

@mixin backdrop__($value) {
    -webkit-backdrop-filter: blur($value);
    backdrop-filter: blur($value);
}

// Shadow.
@mixin shadow__($shadow, $type: box) {
    -webkit-box-shadow: $shadow;
    box-shadow: $shadow;

    @if ($type == text) {
        text-shadow: $shadow;
    }
}

// Transitions.
@mixin transition__($duration: 1s, $delay: 0s, $property: all, $function: ease) {
    -webkit-transition: $duration $delay $property $function;
    -o-transition: $duration $delay $property $function;
    transition: $duration $delay $property $function;
}

// Animations.
@mixin animate__($name, $duration, $timing, $delay: 0s, $iteration: 1, $direction: normal, $fill: none, $play: running) {
    -webkit-animation-name: $name;
    animation-name: $name;
    -webkit-animation-duration: $duration;
    animation-duration: $duration;
    -webkit-animation-timing-function: $timing;
    animation-timing-function: $timing;
    -webkit-animation-delay: $delay;
    animation-delay: $delay;
    -webkit-animation-iteration-count: $iteration;
    animation-iteration-count: $iteration;
    -webkit-animation-direction: $direction;
    animation-direction: $direction;
    -webkit-animation-fill-mode: $fill;
    animation-fill-mode: $fill;
    -webkit-animation-play-state: $play;
    animation-play-state: $play;
}

// | ELEMENTS |

// Divider (HR).
@mixin line__($align: center, $width: 4.375rem, $height: 0.125rem, $color, $margin: 1.563rem auto) {
    // Alinhado ao centro.
    @if ($align == center) {
        width: $width;
        height: $height;
        background-color: $color;
        margin: $margin;

        // ALinhado a esquerda.
    } @else if ($align == left) {
        width: $width;
        height: $height;
        background-color: $color;
        margin: $margin;

        // Alinhado a direita.
    } @else if($align == right) {
        width: $width;
        height: $height;
        background-color: $color;
        margin: $margin;
    }
}

/// @param {String} $propriedade - Propriedade de CSS sem prefixo
/// @param {*} $valor - valor de CSS crú
/// @param {List} $prefixos - Lista de prefixos a serem expostos

@mixin prefixes__($property, $value, $prefixes: ()) {
    @each $prefix in $prefixes {
      -#{$prefix}-#{$property}: $value;
    }
  
    #{$property}: $value;
}
// @include prefixes__(transform, rotate(90deg), ('webkit', 'ms'));


/* aspect-ratio: width / heihgt;
    -> Para Imagens e Videos.
    -> Exemplo: apect-ratio: 16 / 9
    -> O video ou a imagem sempre vai manter essa proporção de tamanho independente da tela aumentar ou diminuir.
    -> Não funciona em nenhum navegador estável ainda.
*/
